package tray

import (
	"context"
	_ "embed"
	"log"
	"runtime"

	"github.com/getlantern/systray"
)

// Embed the icon file directly into the binary
//go:embed icon.ico
var embeddedIconData []byte

// loadEmbeddedIconData returns a copy of the icon data that can be garbage collected
func loadEmbeddedIconData() []byte {
	// Return a copy so the original embedded data can potentially be GC'd
	// (though in practice, embedded data is usually kept in read-only memory)
	iconCopy := make([]byte, len(embeddedIconData))
	copy(iconCopy, embeddedIconData)
	return iconCopy
}

// Tray represents a system tray icon
type Tray interface {
	Run()
	Destroy()
}
var systrayReady bool


// Config holds tray icon configuration
type Config struct {
	Title   string
	Tooltip string
	OnExit  func()
}

var aboutExtra string

// SetAboutExtra sets extra text to append in the About dialog (e.g., port info).
func SetAboutExtra(extra string) { aboutExtra = extra }

// SysTray implements the Tray interface using getlantern/systray
type SysTray struct {
	config Config
	ctx    context.Context
	cancel context.CancelFunc
}

// New creates a new system tray icon using getlantern/systray
func New(config Config) (Tray, error) {
	ctx, cancel := context.WithCancel(context.Background())

	return &SysTray{
		config: config,
		ctx:    ctx,
		cancel: cancel,
	}, nil
}

func (t *SysTray) Run() {
	log.Printf("Starting systray...")

	systray.Run(t.onReady, t.onExit)
}

func (t *SysTray) onReady() {
	log.Printf("Systray ready, setting up icon and menu")

	// Use embedded icon data (get a copy that can be GC'd after use)
	iconData := loadEmbeddedIconData()
	log.Printf("Using embedded icon, size: %d bytes", len(iconData))
	systray.SetIcon(iconData)
	log.Printf("Embedded icon set successfully")
	// iconData can now be garbage collected after systray.SetIcon copies it

	systray.SetTitle("Screen OCR")
	systray.SetTooltip(t.config.Tooltip)
	systrayReady = true

	// Create menu items
	mAbout := systray.AddMenuItem("About Screen OCR", "About this application")
	systray.AddSeparator()
	mExit := systray.AddMenuItem("Exit", "Exit the application")

	log.Printf("Systray menu created, starting event loop")

	// Handle menu clicks in a separate goroutine
	go func() {
		for {
			select {
			case <-mAbout.ClickedCh:
				log.Printf("About menu clicked")
				showAboutDialog()
			case <-mExit.ClickedCh:
				log.Printf("Exit menu clicked")
				if t.config.OnExit != nil {
					t.config.OnExit()
				}
				systray.Quit()
				return
			case <-t.ctx.Done():
				log.Printf("Systray context cancelled")
				systray.Quit()
				return
			}
		}
	}()
}

func (t *SysTray) onExit() {
	log.Printf("Systray exiting")
	t.cancel()
}

func (t *SysTray) Destroy() {
	log.Printf("Destroying systray")
	systray.Quit()
	t.cancel()
}
// UpdateTooltip updates the tray tooltip if systray is ready; otherwise no-op.
func UpdateTooltip(tt string) {
	if !systrayReady { return }
	systray.SetTooltip(tt)
}


// getIconData returns the icon data for the tray icon
// Based on the new SVG design with gray background and improved visibility
func getIconData() []byte {
	// Complete 16x16 ICO file with the new scissor/selection design
	return []byte{
		// ICO header
		0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x10, 0x10, 0x00, 0x00, 0x01, 0x00, 0x20, 0x00, 0x68, 0x04,
		0x00, 0x00, 0x16, 0x00, 0x00, 0x00,
		// BITMAPINFOHEADER
		0x28, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x20, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		// Pixel data (16x16, bottom-up, BGRA format)
		// Row 15 (top of image) - Gray background
		0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF,
		0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF,
		0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF,
		0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF,
		// Row 14 - Gray background with selection rectangle top
		0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD4, 0x78, 0x00, 0xFF, 0xD4, 0x78, 0x00, 0xFF,
		0xD4, 0x78, 0x00, 0xFF, 0xD4, 0x78, 0x00, 0xFF, 0xD4, 0x78, 0x00, 0xFF, 0xD4, 0x78, 0x00, 0xFF,
		0xD4, 0x78, 0x00, 0xFF, 0xD4, 0x78, 0x00, 0xFF, 0xD4, 0x78, 0x00, 0xFF, 0xD4, 0x78, 0x00, 0xFF,
		0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF,
		// Row 13 - Selection rectangle sides
		0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD4, 0x78, 0x00, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF,
		0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF,
		0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD4, 0x78, 0x00, 0xFF,
		0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF,
		// Row 12 - Selection rectangle sides
		0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD4, 0x78, 0x00, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF,
		0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF,
		0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD4, 0x78, 0x00, 0xFF,
		0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF,
		// Rows 11-8 - Selection rectangle sides (continue pattern)
		0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD4, 0x78, 0x00, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF,
		0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF,
		0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD4, 0x78, 0x00, 0xFF,
		0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF,
		// Row 7 - Selection rectangle bottom + scissors start
		0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD4, 0x78, 0x00, 0xFF, 0xD4, 0x78, 0x00, 0xFF,
		0xD4, 0x78, 0x00, 0xFF, 0xD4, 0x78, 0x00, 0xFF, 0xD4, 0x78, 0x00, 0xFF, 0xD4, 0x78, 0x00, 0xFF,
		0xD4, 0x78, 0x00, 0xFF, 0xD4, 0x78, 0x00, 0xFF, 0xD4, 0x78, 0x00, 0xFF, 0xD4, 0x78, 0x00, 0xFF,
		0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF,
		// Row 6 - Scissors and cut line
		0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF,
		0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF,
		0xD9, 0xD9, 0xD9, 0xFF, 0x66, 0x66, 0x66, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0x33, 0x33, 0x33, 0xFF,
		0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF,
		// Row 5 - Scissors handles
		0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF,
		0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF,
		0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0x66, 0x66, 0x66, 0xFF, 0x33, 0x33, 0x33, 0xFF,
		0x33, 0x33, 0x33, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF,
		// Row 4 - Scissors blades
		0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF,
		0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF,
		0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0x33, 0x33, 0x33, 0xFF,
		0x33, 0x33, 0x33, 0xFF, 0x33, 0x33, 0x33, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF,
		// Row 3 - More scissors
		0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF,
		0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF,
		0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF,
		0x33, 0x33, 0x33, 0xFF, 0x33, 0x33, 0x33, 0xFF, 0x33, 0x33, 0x33, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF,
		// Row 2 - Scissors handles
		0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF,
		0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF,
		0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF,
		0x33, 0x33, 0x33, 0xFF, 0x33, 0x33, 0x33, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF,
		// Row 1 - Gray background
		0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF,
		0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF,
		0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF,
		0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF,
		// Row 0 (bottom) - Gray background
		0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF,
		0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF,
		0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF,
		0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF, 0xD9, 0xD9, 0xD9, 0xFF,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		// AND mask (all zeros for no transparency mask)
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}
}

// showAboutDialog displays an about dialog
func showAboutDialog() {
	message := `Screen OCR Tool v1.0

A powerful screen text extraction tool using AI vision models.

Usage Modes:
• Interactive: Run without arguments for system tray mode
• --run-once: Single OCR capture → clipboard → silent exit
• --run-once-std: Single OCR capture → stdout → exit

Features:
• Press Ctrl+Alt+Q to capture screen regions
• Automatic text extraction using OCR
• Text copied to clipboard automatically
• System tray integration
• Provider routing support (PROVIDERS= in .env)`
	if aboutExtra != "" {
		message += "\n\n" + aboutExtra
	}
	message += "\n\nBuilt with Go and OpenRouter AI models."

	if runtime.GOOS == "windows" {
		showWindowsMessageBox("About Screen OCR", message)
	} else {
		log.Printf("About: %s", message)
	}
}


